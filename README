# üöÄ Telegram Subscription Management System

A comprehensive multi-admin subscription management platform similar to Rigi, Cosmofeed, and Graphy. Automates payments, KYC, e-signatures, Telegram channel management, and admin earnings with enterprise-grade security and **dynamic custom routing**.

## üìã **System Overview**

### **Core Features**
- üí≥ **Multi-Gateway Payment Processing** (Cashfree with webhook security)
- üë• **Multi-Admin Architecture** with complete data isolation
- üìÑ **Automated KYC Collection** with e-signature integration (Digio)
- ü§ñ **Smart Telegram Bot** with multi-channel management
- üí∞ **Admin Earnings & Withdrawal System** with approval workflow
- üìß **Email Automation** (welcome, documents, notifications)
- üîê **Enterprise Security** (JWT, RBAC, webhook signatures)
- üåü **Dynamic Custom Routes** (`domain.com/pc/xyzgroup`) **NEW!**
- üì± **Smart User Login System** (first-time & returning users) **NEW!**

### **Technical Stack**
- **Backend:** Node.js, Express.js, MongoDB, Socket.IO
- **Frontend:** React.js, Redux, Vite
- **Bot:** Python, python-telegram-bot
- **Integrations:** Cashfree, Digio, Nodemailer, Cloudinary
- **Security:** HMAC-SHA256 webhooks, JWT auth, role-based access

---

## üèóÔ∏è **Architecture Overview**

### **System Flow**
```
User Journey: Custom Group URL ‚Üí Plan Selection ‚Üí Payment ‚Üí KYC ‚Üí E-signature ‚Üí Email ‚Üí Telegram Access
Admin Flow: Dashboard ‚Üí Group Creation ‚Üí Custom Routes ‚Üí User Management ‚Üí Earnings ‚Üí Withdrawals
```

### **Multi-Admin Data Isolation**
- Each admin manages their own users, groups, and payments
- Super admin has global system oversight
- Complete data separation with adminId attribution
- Secure API endpoints with context injection

### **üåü Dynamic Custom Routing System**
- **Custom URLs:** `domain.com/pc/crypto-signals`, `domain.com/pc/trading-vip`
- **Route Validation:** Automatic availability checking with conflict prevention
- **Professional Branding:** Each group gets its own branded landing page
- **Admin Control:** Admins can create memorable, custom routes for their groups

### **üì± Smart User Login System**
- **First-time Users:** OTP ‚Üí KYC Form ‚Üí User Creation ‚Üí Access
- **Returning Users:** OTP ‚Üí Auto-login (skips KYC) ‚Üí Updated Data ‚Üí Access
- **Phone-based:** Uses phone number as unique identifier
- **No Duplicates:** Prevents duplicate user creation on subsequent logins

---

## üìÅ **Project Structure**

```
TG Automation/
‚îú‚îÄ‚îÄ backend/                          # Node.js API Server
‚îÇ   ‚îú‚îÄ‚îÄ controllers/                  # Route handlers
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ adminController.js        # Admin management & auth
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ kycController.js          # User KYC & phone-based login
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ paymentController.js      # Payment processing with admin attribution
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ digio.controller.js       # E-signature integration
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ groupController.js        # Telegram group & custom route management
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ withdrawalController.js   # Admin earnings & withdrawals
‚îÇ   ‚îú‚îÄ‚îÄ models/                       # MongoDB schemas
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ user.model.js            # User data with admin attribution
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ paymentLinkModel.js      # Payments with commission tracking
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ plan.js                  # Admin-specific subscription plans
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ group.model.js           # Groups with customRoute field
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ withdrawalRequest.model.js # Admin withdrawal requests
‚îÇ   ‚îú‚îÄ‚îÄ services/                     # Business logic
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ cashfreeService.js       # Payment gateway with webhooks
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ emailService.js          # Multi-template email system
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ kycService.js            # Phone-based user management
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ groupService.js          # Route availability checking
‚îÇ   ‚îú‚îÄ‚îÄ routes/                      # API endpoints
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ publicRoutes.js          # Dynamic group pages (/pc/{route})
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ groupRoutes.js           # Route availability checking
‚îÇ   ‚îî‚îÄ‚îÄ server.js                    # Main server file
‚îú‚îÄ‚îÄ frontend/                        # React.js Dashboard
‚îú‚îÄ‚îÄ TG Bot Script/                   # Python Multi-Channel Bot
‚îÇ   ‚îî‚îÄ‚îÄ TG_Automation_Enhanced.py   # Enhanced bot with API integration
‚îî‚îÄ‚îÄ README.md                       # This comprehensive guide
```

---

## üöÄ **Quick Start Guide**

### **Prerequisites**
```bash
Node.js 18+, Python 3.8+, MongoDB (local or Atlas)
Git, npm/yarn, pip
```

### **1. Backend Setup**
```bash
cd backend
npm install
cp .env.example .env
# Configure .env with your credentials
npm run dev  # Starts on http://localhost:4000
```

### **2. Frontend Setup**
```bash
cd frontend
npm install
echo "VITE_API_URL=http://localhost:4000" > .env
npm run dev  # Starts on http://localhost:5173
```

### **3. Bot Setup**
```bash
cd "TG Bot Script"
pip install python-telegram-bot python-dotenv requests
# Create .env with BOT_TOKEN and BACKEND_URL
python TG_Automation_Enhanced.py
```

---

## üîß **Environment Configuration**

### **Backend (.env)**
```env
# Database
MONGODB_URI=mongodb://localhost:27017/telegram_payment_db

# Server
BACKEND_URL=http://localhost:4000
FRONTEND_URL=http://localhost:5173
PORT=4000
NODE_ENV=development

# Security
JWT_SECRET=your_super_secure_jwt_key

# Payment Gateway (Cashfree)
CASHFREE_BASE_URL=https://sandbox.cashfree.com/pg
CASHFREE_CLIENT_ID=your_client_id
CASHFREE_CLIENT_SECRET=your_client_secret
CASHFREE_WEBHOOK_SECRET=your_webhook_secret

# E-signature (Digio)
DIGIO_BASE_URL=https://ext.digio.in:444
DIGIO_CLIENT_ID=your_digio_client_id
DIGIO_CLIENT_SECRET=your_digio_client_secret
DIGIO_WEBHOOK_SECRET=your_digio_webhook_secret

# Email
EMAIL_SERVICE=gmail
EMAIL_USER=your_email@gmail.com
EMAIL_PASS=your_app_password

# Telegram Bot
BOT_TOKEN=your_bot_token
```

### **Bot (.env)**
```env
BOT_TOKEN=your_bot_token
BACKEND_URL=http://localhost:4000
ADMIN_USER_IDS=your_telegram_id,admin2_id
```

---

## üåü **NEW: Dynamic Custom Routing System**

### **How It Works**
Instead of using generic landing pages, each group gets its own custom URL:
- **Old:** `domain.com/generic-page?groupId=123`
- **New:** `domain.com/pc/crypto-signals` ‚ú®

### **Admin Features**
```javascript
// 1. Check if route is available
POST /api/groups/check-route
Body: { "customRoute": "crypto-signals" }
Response: { "available": true, "message": "Route is available" }

// 2. Create group with custom route
POST /api/groups/create
Body: {
  "name": "Crypto Signals VIP",
  "customRoute": "crypto-signals",
  "description": "Premium trading signals"
}

// 3. Users access via: domain.com/pc/crypto-signals
```

### **Route Validation**
- **Format:** Only `a-z`, `0-9`, `-`, `_` allowed
- **Length:** 3-50 characters
- **Reserved Routes:** Blocks `admin`, `api`, `auth`, `login`, etc.
- **Conflict Check:** Prevents duplicate routes across all admins
- **Case Normalization:** Automatically converts to lowercase

### **Landing Page API**
```javascript
// Public endpoint for group landing pages
GET /pc/{customRoute}
Response: {
  "success": true,
  "group": {
    "id": "group_id",
    "name": "Crypto Signals VIP", 
    "customRoute": "crypto-signals",
    "subscriptionPlans": [...],
    "faqs": [...],
    "telegramChatTitle": "Crypto VIP Channel"
  }
}
```

---

## üì± **NEW: Smart User Login System**

### **Phone-Based Authentication**
No more complex email-based flows. Users login with phone number:

### **First-Time User Flow**
```
1. Enter phone ‚Üí Send OTP ‚Üí Verify OTP
2. System checks: POST /api/kyc/check { "phone": "+919106976016" }
3. Response: { "userExists": false }
4. Show KYC form ‚Üí User fills details
5. Submit: POST /api/kyc/register { phone, firstName, lastName, email, ... }
6. Response: { "isNewUser": true, "user": {...} }
7. User created with proper adminId attribution
```

### **Returning User Flow**
```
1. Enter phone ‚Üí Send OTP ‚Üí Verify OTP  
2. System checks: POST /api/kyc/check { "phone": "+919106976016" }
3. Response: { "userExists": true, "user": {...} }
4. Skip KYC form ‚Üí Direct access or optional data update
5. Optional: POST /api/kyc/register (updates existing user)
6. Response: { "isNewUser": false, "user": {...} }
```

### **Key Benefits**
- **No Duplicates:** Phone number prevents duplicate users
- **Smart Detection:** Automatically detects first-time vs returning users
- **Admin Attribution:** Proper linking to correct admin/group via payment history
- **Data Updates:** Returning users can update their information seamlessly

---

## üîê **API Documentation**

### **Authentication**
```javascript
// All admin routes require JWT token
headers: {
  'Authorization': 'Bearer <jwt_token>'
}
```

### **üåü NEW: Dynamic Routing Endpoints**

#### **Route Management**
```javascript
POST /api/groups/check-route      # Check route availability
GET  /pc/{customRoute}            # Public group landing page
GET  /api/groups/route/{route}    # Alternative group data endpoint
```

#### **üì± NEW: User Management**
```javascript
POST /api/kyc/check               # Check if user exists by phone
POST /api/kyc/register            # Create or update user by phone  
POST /api/kyc/add                 # Legacy email-based (kept for compatibility)
```

#### **Admin Management**
```javascript
POST /api/admin/login             # Admin authentication
POST /api/admin/register          # Create new admin
GET  /api/admin/profile           # Get admin profile
```

#### **Payment Processing**
```javascript
POST /api/payment/create          # Create payment link with admin attribution
GET  /api/payment/status/:id      # Check payment status
POST /api/payment/webhook         # Secure webhook handler
GET  /api/payment/revenue         # Admin revenue (filtered)
```

#### **Group Management**
```javascript
GET  /api/groups/all              # Admin's groups only
POST /api/groups/create           # Create group with custom route
GET  /api/groups/active           # Public endpoint for bot
POST /api/groups/check-route      # Check route availability
```

#### **Withdrawal System**
```javascript
GET  /api/withdrawal/balance      # Admin's available balance
POST /api/withdrawal/request      # Request withdrawal
GET  /api/withdrawal/my-requests  # Admin's withdrawal history
```

---

## ü§ñ **Enhanced Telegram Bot Features**

### **Multi-Channel Management**
```python
# Bot automatically loads active channels
GET /api/groups/active
Response: {
  "active_channels": [
    {
      "channel_id": "-1001234567890",
      "admin_id": "admin123", 
      "name": "Crypto Signals VIP",
      "group_id": "group456"
    }
  ]
}
```

### **Join Request Flow**
```python
1. User requests to join channel
2. Bot checks payment status via API
3. Auto-approves if payment successful and not expired
4. Logs activity to backend
5. Handles expiry and removal automatically
```

### **Bot Commands**
```
/start - Welcome message with admin info
/help  - Show available commands
/status - Check user membership status
/channels - List managed channels (admin only)
/reload - Reload channel configurations (admin only)
```

---

## üí≥ **Payment & Webhook Security**

### **Enhanced Security Features**
```javascript
// Cashfree Webhook Verification
const verifyWebhookSignature = (payload, signature, timestamp) => {
  const signedPayload = `${timestamp}.${payload}`;
  const expectedSignature = crypto
    .createHmac('sha256', process.env.CASHFREE_WEBHOOK_SECRET)
    .update(signedPayload)
    .digest('hex');
  return crypto.timingSafeEqual(Buffer.from(signature), Buffer.from(expectedSignature));
};

// Automatic admin attribution from payment
const payment = await PaymentLink.findOne({ phone }).sort({ createdAt: -1 });
if (payment?.adminId) {
  userData.adminId = payment.adminId;
  userData.groupId = payment.groupId;
}
```

### **Digio Webhook Security**
- Timestamp validation prevents replay attacks
- Signature verification ensures authenticity
- Automatic user journey continuation post-signature

---

## üìß **Email Automation System**

### **Enhanced Email Templates**
- **Welcome Email:** Sent after successful payment with custom branding
- **Document Email:** Delivers signed documents with professional formatting
- **Telegram Access:** Provides joining instructions with group-specific details
- **Admin Notifications:** Real-time payment and withdrawal alerts

### **Multi-Provider Support**
```javascript
// Supports multiple email providers
EMAIL_SERVICE=gmail|outlook|yahoo|custom_smtp
```

---

## üè≠ **Production Deployment**

### **MongoDB Atlas Setup**
1. Create cluster at [MongoDB Atlas](https://cloud.mongodb.com)
2. Configure IP whitelist and user access
3. Update `MONGODB_URI` with connection string

### **Backend Deployment (Coolify/Docker)**
```dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
EXPOSE 4000
CMD ["node", "server.js"]
```

### **Frontend Deployment**
```dockerfile
FROM node:18-alpine as builder
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

FROM nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html
EXPOSE 80
```

### **Bot VPS Deployment**
```bash
# Install as systemd service
sudo nano /etc/systemd/system/telegram-bot.service

[Unit]
Description=Telegram Automation Bot
After=network.target

[Service]
Type=simple
User=botuser
WorkingDirectory=/home/botuser/telegram-bot
Environment=PATH=/home/botuser/telegram-bot/venv/bin
ExecStart=/home/botuser/telegram-bot/venv/bin/python TG_Automation_Enhanced.py
Restart=always

[Install]
WantedBy=multi-user.target
```

---

## üîç **Multi-Admin Architecture Details**

### **Data Isolation Implementation**
```javascript
// Admin context injection middleware
const injectAdminContext = (req, res, next) => {
  req.adminContext = {
    adminId: req.admin._id,
    role: req.admin.role,
    email: req.admin.email
  };
  next();
};

// Usage in controllers
const getAllUsers = async (req, res) => {
  const adminId = req.adminContext?.adminId;
  const userQuery = req.adminContext?.role === 'superadmin' 
    ? {} 
    : { adminId: adminId };
  const users = await User.find(userQuery);
};
```

### **Admin Attribution Flow**
1. **Plan Creation:** Plans created with `adminId` and `groupId`
2. **Payment Links:** Inherit `adminId` from associated plan
3. **User Registration:** Users linked to admin via payment history
4. **Group Management:** Groups belong to specific admins with custom routes
5. **Revenue Tracking:** All earnings are admin-specific with withdrawal system

---

## üõ°Ô∏è **Security Features**

### **Authentication & Authorization**
- JWT-based authentication with refresh tokens
- Role-based access control (admin/superadmin)
- Admin context injection for complete data isolation
- Secure password hashing with bcrypt

### **Webhook Security**
- HMAC-SHA256 signature verification for all webhooks
- Timestamp validation prevents replay attacks
- Environment-based secret management
- Comprehensive error logging and monitoring

### **Data Protection**
- Admin-specific data filtering across all endpoints
- MongoDB injection prevention with Mongoose validation
- Input validation with express-validator
- CORS configuration for secure frontend integration

---

## üß™ **Testing & Monitoring**

### **üåü Testing New Features**

#### **Dynamic Routing**
```bash
# Test route availability
curl -X POST "http://localhost:4000/api/groups/check-route" \
     -H "Content-Type: application/json" \
     -d '{"customRoute": "my-group"}'

# Test custom group page
curl "http://localhost:4000/pc/my-group"
```

#### **Smart User Login**
```bash
# Check user existence
curl -X POST "http://localhost:4000/api/kyc/check" \
     -H "Content-Type: application/json" \
     -d '{"phone": "+919106976016"}'

# Register/update user
curl -X POST "http://localhost:4000/api/kyc/register" \
     -H "Content-Type: application/json" \
     -d '{"phone": "+919106976016", "firstName": "John", "lastName": "Doe"}'
```

### **Production Monitoring**
```bash
# Server logs
tail -f /var/log/syslog | grep telegram-bot

# Database monitoring
mongo --eval "db.stats()"

# API health check
curl https://your-domain.com/health
curl https://your-domain.com/routes/health
```

---

## üö® **Troubleshooting**

### **Common Issues & Solutions**

#### **Dynamic Routing Issues**
```bash
# Route not working
Check: Group must be active and have customRoute field set
Fix: Ensure group status is 'active' and customRoute is properly saved

# Route conflicts
Check: Multiple groups trying to use same route
Fix: Use route availability checker before creating groups
```

#### **User Login Issues**
```bash
# OTP sent error (FIXED)
Issue: User creation without adminId
Fix: Removed premature user creation from OTP controller

# Duplicate users
Issue: Multiple users with same phone
Fix: Phone-based upsert prevents duplicates automatically
```

#### **Backend Issues**
```bash
# MongoDB connection failed
Check: MONGODB_URI format and network access
Fix: Verify Atlas IP whitelist or local MongoDB status

# Port conflicts during development
Fix: npx kill-port 4000 && npm run dev
```

---

## üìà **Scalability Considerations**

### **Database Optimization**
- Indexes on frequently queried fields (`adminId`, `customRoute`, `phone`, `status`)
- Aggregation pipelines for analytics and admin revenue calculations
- Connection pooling for high concurrency scenarios

### **API Performance**
- Pagination for large datasets with proper limit/offset handling
- Caching for route availability checks and frequent queries
- Rate limiting for webhook endpoints and route validation

### **Bot Scaling**
- Multiple bot instances for high-volume groups
- Queue-based message processing for join requests
- Webhook mode support for better performance than polling

---

## ü§ù **Contributing**

### **Code Standards**
- ESLint configuration for consistent JavaScript styling
- Comprehensive error handling patterns throughout
- Environment-based configuration (never hardcode secrets)
- Proper logging for debugging and monitoring

### **Security Guidelines**
- Never commit secrets, API keys, or tokens
- Always validate and sanitize input data
- Use parameterized queries to prevent injection
- Implement proper error handling without information leakage

---

## üìÑ **License & Legal**

### **Usage Rights**
This system is designed for legitimate subscription management businesses. Users are responsible for compliance with:
- Payment gateway regulations and PCI compliance
- Data protection laws (GDPR, CCPA, etc.)
- Telegram Bot API terms of service
- E-signature legal requirements

### **Third-Party Services**
- **Cashfree:** Payment processing with webhook security
- **Digio:** E-signature services with document automation
- **MongoDB Atlas:** Database hosting with proper indexing
- **Telegram:** Bot API services with multi-channel support

---

## üÜò **Support & Documentation**

### **Getting Help**
- Review troubleshooting section for common issues
- Check API documentation for endpoint details
- Verify environment configuration matches examples
- Test with sandbox/development credentials before production

### **System Requirements**
- **Minimum:** 2GB RAM, 1 CPU core, 20GB storage, SSL certificates
- **Recommended:** 4GB RAM, 2 CPU cores, 50GB storage, load balancer
- **Production:** Monitoring setup, automated backups, scaling capabilities

---

## üéØ **Key New Features Summary**

### **üåü Dynamic Custom Routing**
- Custom group URLs like `domain.com/pc/crypto-signals`
- Professional branding with route availability checking
- Conflict prevention and reserved route protection

### **üì± Smart User Login System**
- Phone-based authentication with automatic user detection
- No duplicate users on subsequent logins
- Seamless first-time vs returning user experience

### **üîí Enhanced Security**
- HMAC-SHA256 webhook signature verification
- Complete admin data isolation across all endpoints
- Proper user attribution via payment history

### **üí∞ Complete Financial System**
- Admin earnings tracking with withdrawal requests
- Proper commission calculation and balance management
- Super admin approval workflow for withdrawals

This comprehensive system provides enterprise-grade subscription management with complete multi-admin architecture, dynamic routing, and smart user management - making it suitable for scaling from small businesses to large platforms with custom branding requirements.